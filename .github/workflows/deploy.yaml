name: Terraform CI

on:
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}

jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume:  ${{ secrets.AWS_GITHUB_ROLE }}
        aws-region: eu-west-2

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

  checkov:
    name: Checkov
    needs: validate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ github.workspace }}
        skip_check: CKV_TF_1
        download_external_modules: true
        framework: terraform
        output_format: cli
        soft_fail: true

  plan:
    name: Plan
    needs: checkov
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE }}
        aws-region: eu-west-2
    
    - name: Terraform init
      id: init
      run: terraform init
    
    - name: Terraform plan
      id: plan
      run: terraform plan -var 'aws_account=${{ secrets.AWS_ACCOUNT}}' -var 'role_name=${{ secrets.ROLE_NAME}}' -out tfplan

    - name: Save TF plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan
  

  apply:
    name: Apply
    needs: plan
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE }}
        aws-region: eu-west-2

    - name: Install Helm 
      uses: azure/setup-helm@v3
      with:
        version: latest # default is latest (stable)
        token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
      id: install

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Download Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
    
    - name: Apply
      id: apply
      run: terraform apply -auto-approve tfplan

  create_cluster_perms:
    name: Create additional cluster permissions
    needs: apply
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      id-token: write
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ROLE }}
        aws-region: eu-west-2
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
      id: install
    
    - name: Get Kubeconfig
      run: aws eks update-kubeconfig --region eu-west-2 --name test-cluster
    
    - name: Create Cluster Role Bindings
      run: |
        cat << EOF > crb.yaml
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: full_access
          rules:
          - apiGroups: ["*"]
            resources: ["*"]
            verbs: ["*"]

          ---

          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: full_access_crb
          subjects:
          - kind: User
            name: ${{ secrets.ROLE_NAME }}
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: full_access
            apiGroup: rbac.authorization.k8s.io
        EOF

    - name: Apply Cluster Role Binding
      run: kubectl apply -f crb.yaml
      


    